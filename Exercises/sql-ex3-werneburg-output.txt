.headers on
.mode csv

/*
1. We have noticed that certain customers prefer to make their orders with certain employees. We want to increase business by encouraging the customer/employee pairs that are more productive, and to channel the pairs that are less productive into other relationships. To this end, we have ordered this
query and the following three. First, I need the customer ID, the customer contact name, the employee ID, the employee name, the order ID, the number of orders, and the total amount of each order, where the customer/employee pair has produced five or more orders between them, ordered by the dollar amount of the order from highest to lowest. The output needs to be in a comma separated format
with strings that include spaces and commas delimited by double quotes. The dollar amount should be formatted as a decimal number with two decimal places.
*/
SELECT
    c.customerid, 
	c.contactname,
	e.employeeid,
	e.firstname||' '||e.lastname as emp_name,
	o.orderid,
	count(od.orderid) as num_orders,
	printf('%.2f',sum(unitprice * quantity)) as order_total	
FROM customers c 
	INNER JOIN orders o
	on o.customerid = c.customerid
	INNER JOIN employees e 
	on e.employeeid = o.employeeid
	INNER JOIN order_details od
	on od.orderid = o.orderid
GROUP BY o.orderid
HAVING COUNT(od.orderid) >= 5
ORDER BY order_total desc;
CustomerID,ContactName,EmployeeID,emp_name,OrderID,num_orders,order_total
ERNSH,"Roland Mendel",3,"Janet Leverling",10514,5,8623.45
BLONP,"Frédérique Citeaux",4,"Margaret Peacock",10360,5,7390.20
QUICK,"Horst Kloss",3,"Janet Leverling",11021,5,6941.49
SAVEA,"Jose Pavarotti",5,"Steven Buchanan",10607,5,6475.40
SAVEA,"Jose Pavarotti",1,"Nancy Davolio",10612,5,6375.00
SAVEA,"Jose Pavarotti",4,"Margaret Peacock",10847,6,6164.90
SAVEA,"Jose Pavarotti",9,"Anne Dodsworth",10324,5,6155.90
KOENE,"Philip Cramer",9,"Anne Dodsworth",10893,5,5502.11
ERNSH,"Roland Mendel",8,"Laura Callahan",10979,6,4813.50
SAVEA,"Jose Pavarotti",1,"Nancy Davolio",11064,5,4722.30
ERNSH,"Roland Mendel",7,"Robert King",10836,5,4705.50
SAVEA,"Jose Pavarotti",2,"Andrew Fuller",10657,6,4371.60
QUICK,"Horst Kloss",8,"Laura Callahan",10845,5,4059.00
SUPRD,"Pascale Cartrain",7,"Robert King",10458,5,3891.00
SAVEA,"Jose Pavarotti",6,"Michael Suyama",10555,5,3680.50
ERNSH,"Roland Mendel",4,"Margaret Peacock",10698,5,3600.73
QUICK,"Horst Kloss",8,"Laura Callahan",10962,5,3584.00
WHITC,"Karl Jablonski",4,"Margaret Peacock",10861,5,3523.40
SAVEA,"Jose Pavarotti",1,"Nancy Davolio",10393,5,3302.60
SAVEA,"Jose Pavarotti",5,"Steven Buchanan",10714,5,2941.00
ERNSH,"Roland Mendel",4,"Margaret Peacock",10382,5,2900.00
VAFFE,"Palle Ibsen",1,"Nancy Davolio",10465,5,2719.00
FRANK,"Peter Franken",4,"Margaret Peacock",10337,5,2467.00
SAVEA,"Jose Pavarotti",6,"Michael Suyama",11031,5,2393.50
FRANK,"Peter Franken",4,"Margaret Peacock",10670,5,2301.75
AROUT,"Thomas Hardy",1,"Nancy Davolio",10558,5,2142.90
QUICK,"Horst Kloss",3,"Janet Leverling",10273,5,2142.40
QUEEN,"Lúcia Carvalho",7,"Robert King",10406,5,2018.20
RATTC,"Paula Wilson",4,"Margaret Peacock",10294,5,1887.60
RICSU,"Michael Holz",1,"Nancy Davolio",10537,5,1823.80
HUNGO,"Patricia McKenna",3,"Janet Leverling",10309,5,1762.00
WARTH,"Pirkko Koskitalo",2,"Andrew Fuller",10553,5,1546.30
KOENE,"Philip Cramer",1,"Nancy Davolio",10325,5,1497.00
FRANK,"Peter Franken",8,"Laura Callahan",10623,5,1429.75
RATTC,"Paula Wilson",1,"Nancy Davolio",11077,25,1374.60
QUICK,"Horst Kloss",2,"Andrew Fuller",10515,5,10588.50
QUICK,"Horst Kloss",2,"Andrew Fuller",10691,5,10164.80
/*
2. Second, I want the least productive pairs with the same columns. The total of orders should be less than three, the dollar amount of the order is less than $50.00, and the orders are ranked by increasing dollar amounts, starting with the least order. Here is the expected output.
*/
SELECT
    c.customerid, 
	c.contactname,
	e.employeeid,
	e.firstname||' '||e.lastname as emp_name,
	o.orderid,
	count(od.orderid) as num_orders,
	printf("%.2f",sum(unitprice * quantity)) as order_total
FROM customers c 
	INNER JOIN orders o
	on o.customerid = c.customerid
	INNER JOIN employees e 
	on e.employeeid = o.employeeid
	INNER JOIN order_details od
	on od.orderid = o.orderid
GROUP BY o.orderid
HAVING COUNT(od.orderid) < 5 AND sum(unitprice * quantity) < 50
ORDER BY order_total asc;
CustomerID,ContactName,EmployeeID,emp_name,OrderID,num_orders,order_total
CACTU,"Patricio Simpson",9,"Anne Dodsworth",10782,1,12.50
FRANS,"Paolo Accorti",4,"Margaret Peacock",10807,1,18.40
REGGC,"Maurizio Moroni",9,"Anne Dodsworth",10586,1,28.00
SUPRD,"Pascale Cartrain",4,"Margaret Peacock",10767,1,28.00
OCEAN,"Yvonne Moncada",4,"Margaret Peacock",10898,1,30.00
LONEP,"Fran Wilson",8,"Laura Callahan",10883,1,36.00
SAVEA,"Jose Pavarotti",2,"Andrew Fuller",10815,1,40.00
ISLAT,"Helen Bennett",4,"Margaret Peacock",10674,1,45.00
WELLI,"Paula Parente",1,"Nancy Davolio",10900,1,45.00
LAMAI,"Annette Roulet",7,"Robert King",11051,1,45.00
NORTS,"Simon Crowther",3,"Janet Leverling",11057,1,45.00
SPLIR,"Art Braunschweiger",6,"Michael Suyama",10271,1,48.00
FRANS,"Paolo Accorti",2,"Andrew Fuller",10422,1,49.80

/*
3. Third, I need the most productive pairs as in the first report above, omitting the order ID but ranked by the average amount from highest to lowest of all orders by the customer/employee pair. Include only pairs where the amount of the average exceeds $2,500.00. Here is the expected output.
*/

SELECT
    c.customerid, 
	c.contactname,
	e.employeeid,
	e.firstname||' '||e.lastname as emp_name,
	count(od.orderid) as num_orders,
	printf('%.2f',avg(unitprice * quantity)) as order_avg	
FROM customers c 
	INNER JOIN orders o
	on o.customerid = c.customerid
	INNER JOIN employees e 
	on e.employeeid = o.employeeid
	INNER JOIN order_details od
	on od.orderid = o.orderid
GROUP BY o.orderid
HAVING avg(unitprice*quantity) > 2500
ORDER BY order_avg desc;
CustomerID,ContactName,EmployeeID,emp_name,num_orders,order_avg
QUICK,"Horst Kloss",2,"Andrew Fuller",2,8625.00
RATTC,"Paula Wilson",9,"Anne Dodsworth",2,5690.00
HUNGO,"Patricia McKenna",3,"Janet Leverling",2,5417.62
PICCO,"Georg Pipps",7,"Robert King",2,5370.80
GREAL,"Howard Snyder",4,"Margaret Peacock",2,4445.50
HUNGO,"Patricia McKenna",2,"Andrew Fuller",2,4133.70
SAVEA,"Jose Pavarotti",7,"Robert King",4,4080.48
MEREP,"Jean Fresnière",7,"Robert King",3,3831.07
FOLKO,"Maria Larsson",7,"Robert King",2,3263.63
QUEEN,"Lúcia Carvalho",5,"Steven Buchanan",4,3070.30
WHITC,"Karl Jablonski",2,"Andrew Fuller",3,2967.50
KOENE,"Philip Cramer",3,"Janet Leverling",4,2872.68
SIMOB,"Jytte Petersen",4,"Margaret Peacock",4,2820.80
RATTC,"Paula Wilson",3,"Janet Leverling",4,2623.90
QUICK,"Horst Kloss",3,"Janet Leverling",4,2547.93
HANAR,"Mario Pontes",1,"Nancy Davolio",1,15810.00

/*
4. Finally, I need the least productive pairs as ranked by average order amount, from lowest to highest, formatted as above. Omit the order ID. Include only pairs where the average order amount is less than $50.00. Here is the expected output.
*/
SELECT
    c.customerid, 
	c.contactname,
	e.employeeid,
	e.firstname||' '||e.lastname as emp_name,
	count(od.orderid) as num_orders,
	printf('%.2f',avg(unitprice * quantity)) as order_avg	
FROM customers c 
	INNER JOIN orders o
	on o.customerid = c.customerid
	INNER JOIN employees e 
	on e.employeeid = o.employeeid
	INNER JOIN order_details od
	on od.orderid = o.orderid
GROUP BY o.orderid
HAVING avg(unitprice*quantity) < 50
ORDER BY order_avg asc;
CustomerID,ContactName,EmployeeID,emp_name,num_orders,order_avg
CACTU,"Patricio Simpson",9,"Anne Dodsworth",1,12.50
FRANS,"Paolo Accorti",4,"Margaret Peacock",1,18.40
REGGC,"Maurizio Moroni",9,"Anne Dodsworth",1,28.00
SUPRD,"Pascale Cartrain",4,"Margaret Peacock",1,28.00
LAUGB,"Yoshi Tannamuri",2,"Andrew Fuller",2,28.75
ROMEY,"Alejandra Camino",4,"Margaret Peacock",3,28.83
OCEAN,"Yvonne Moncada",4,"Margaret Peacock",1,30.00
LONEP,"Fran Wilson",8,"Laura Callahan",1,36.00
RANCH,"Sergio Gutiérrez",6,"Michael Suyama",2,38.00
SAVEA,"Jose Pavarotti",2,"Andrew Fuller",1,40.00
FRANS,"Paolo Accorti",3,"Janet Leverling",2,44.00
ANATR,"Ana Trujillo",7,"Robert King",2,44.40
REGGC,"Maurizio Moroni",4,"Margaret Peacock",2,44.50
ISLAT,"Helen Bennett",4,"Margaret Peacock",1,45.00
WELLI,"Paula Parente",1,"Nancy Davolio",1,45.00
LAMAI,"Annette Roulet",7,"Robert King",1,45.00
NORTS,"Simon Crowther",3,"Janet Leverling",1,45.00
FRANS,"Paolo Accorti",1,"Nancy Davolio",2,46.75
SPLIR,"Art Braunschweiger",6,"Michael Suyama",1,48.00
FRANS,"Paolo Accorti",2,"Andrew Fuller",1,49.80

/*
5. Please create a report with the order ID, the customer ID, the customer name, the customer country, and the dollar amount of the order, sorted alphabetically by country and numerically from highest to lowest by the dollar amount of the order, where the order total exceeds $5,000.00. Here is the output.
*/
SELECT 
	o.orderid,
	c.customerid,
	c.companyname, 
	c.country, 
	printf('%.2f',sum(unitprice*quantity)) as total_order
FROM customers c
    INNER JOIN orders o
	on o.customerid = c.customerid
	INNER JOIN order_details od
	on od.orderid = o.orderid
GROUP BY o.orderid
HAVING sum(unitprice*quantity) > 5000
ORDER BY country asc, total_order desc;
OrderID,CustomerID,CompanyName,Country,total_order
10514,ERNSH,"Ernst Handel",Austria,8623.45
10776,ERNSH,"Ernst Handel",Austria,6984.50
11017,ERNSH,"Ernst Handel",Austria,6750.00
10633,ERNSH,"Ernst Handel",Austria,6483.05
10895,ERNSH,"Ernst Handel",Austria,6379.40
10595,ERNSH,"Ernst Handel",Austria,6300.00
10430,ERNSH,"Ernst Handel",Austria,5796.00
10351,ERNSH,"Ernst Handel",Austria,5677.60
11072,ERNSH,"Ernst Handel",Austria,5218.00
10353,PICCO,"Piccolo und mehr",Austria,10741.60
10981,HANAR,"Hanari Carnes",Brazil,15810.00
10372,QUEEN,"Queen Cozinha",Brazil,12281.20
10424,MEREP,"Mère Paillarde",Canada,11493.20
10417,SIMOB,"Simons bistro",Denmark,11283.20
10360,BLONP,"Blondesddsl père et fils",France,7390.20
11021,QUICK,QUICK-Stop,Germany,6941.49
10893,KOENE,"Königlich Essen",Germany,5502.11
10865,QUICK,QUICK-Stop,Germany,17250.00
10817,KOENE,"Königlich Essen",Germany,11490.70
10515,QUICK,QUICK-Stop,Germany,10588.50
10540,QUICK,QUICK-Stop,Germany,10191.70
10691,QUICK,QUICK-Stop,Germany,10164.80
10912,HUNGO,"Hungry Owl All-Night Grocers",Ireland,8267.40
10687,HUNGO,"Hungry Owl All-Night Grocers",Ireland,6201.90
10897,HUNGO,"Hungry Owl All-Night Grocers",Ireland,10835.24
10993,FOLKO,"Folk och fä HB",Sweden,6527.25
11032,WHITC,"White Clover Markets",USA,8902.50
10816,GREAL,"Great Lakes Food Market",USA,8891.00
10607,SAVEA,"Save-a-lot Markets",USA,6475.40
10612,SAVEA,"Save-a-lot Markets",USA,6375.00
10847,SAVEA,"Save-a-lot Markets",USA,6164.90
10324,SAVEA,"Save-a-lot Markets",USA,6155.90
10440,SAVEA,"Save-a-lot Markets",USA,5793.10
10678,SAVEA,"Save-a-lot Markets",USA,5256.50
10616,GREAL,"Great Lakes Food Market",USA,5032.00
11030,SAVEA,"Save-a-lot Markets",USA,16321.90
10889,RATTC,"Rattlesnake Canyon Grocery",USA,11380.00
10479,RATTC,"Rattlesnake Canyon Grocery",USA,10495.60

/*
6. I want to know the unique (distinct) cities, regions, and postal codes: (a) where we have both customers and employees, (b) where we have customers but no employees AND both customers and employees, and (c) where we have employees but no customers AND both customers and employees. Write three queries, using inner and outer joins. Report the results of the queries. There is no need for any further reporting
*/

.mode list 

--(a)

SELECT DISTINCT
	c.companyname as customer, 
	c.city,
	c.region,
	c.postalcode,
	e.firstname||' '||e.lastname as employee,
	e.city,
	e.region,
	e.postalcode
FROM customers c	
	INNER JOIN employees e
	on e.city = c.city
	AND e.region = c.region 
	AND e.postalcode = c.postalcode;


--(b)

SELECT DISTINCT
    c.companyname as customer,
	c.city,
	c.region,
	c.postalcode,
	e.firstname||' '||e.lastname as employee,
	e.city,
	e.region,
	e.postalcode
FROM customers c	
	LEFT JOIN employees e
	on e.city = c.city
	AND e.region = c.region
	AND e.postalcode = c.postalcode;
customer|City|Region|PostalCode|employee|City|Region|PostalCode
CompanyName|City|Region|PostalCode||||
Alfreds Futterkiste|Berlin||12209||||
Ana Trujillo Emparedados y helados|México D.F.||05021||||
Antonio Moreno Taquería|México D.F.||05023||||
Around the Horn|London||WA1 1DP||||
Berglunds snabbköp|Luleå||S-958 22||||
Blauer See Delikatessen|Mannheim||68306||||
Blondesddsl père et fils|Strasbourg||67000||||
Bólido Comidas preparadas|Madrid||28023||||
Bon app''|Marseille||13008||||
Bottom-Dollar Markets|Tsawassen|BC|T2F 8M4||||
B''s Beverages|London||EC2 5NT||||
Cactus Comidas para llevar|Buenos Aires||1010||||
Centro comercial Moctezuma|México D.F.||05022||||
Chop-suey Chinese|Bern||3012||||
Comércio Mineiro|Sao Paulo|SP|05432-043||||
Consolidated Holdings|London||WX1 6LT||||
Drachenblut Delikatessen|Aachen||52066||||
Du monde entier|Nantes||44000||||
Eastern Connection|London||WX3 6FW||||
Ernst Handel|Graz||8010||||
Familia Arquibaldo|Sao Paulo|SP|05442-030||||
FISSA Fabrica Inter. Salchichas S.A.|Madrid||28034||||
Folies gourmandes|Lille||59000||||
Folk och fä HB|Bräcke||S-844 67||||
Frankenversand|München||80805||||
France restauration|Nantes||44000||||
Franchi S.p.A.|Torino||10100||||
Furia Bacalhau e Frutos do Mar|Lisboa||1675||||
Galería del gastrónomo|Barcelona||08022||||
Godos Cocina Típica|Sevilla||41101||||
Gourmet Lanchonetes|Campinas|SP|04876-786||||
Great Lakes Food Market|Eugene|OR|97403||||
GROSELLA-Restaurante|Caracas|DF|1081||||
Hanari Carnes|Rio de Janeiro|RJ|05454-876||||
HILARION-Abastos|San Cristóbal|Táchira|5022||||
Hungry Coyote Import Store|Elgin|OR|97827||||
Hungry Owl All-Night Grocers|Cork|Co. Cork|||||
Island Trading|Cowes|Isle of Wight|PO31 7PJ||||
Königlich Essen|Brandenburg||14776||||
La corne d''abondance|Versailles||78000||||
La maison d''Asie|Toulouse||31000||||
Laughing Bacchus Wine Cellars|Vancouver|BC|V3F 2K1||||
Lazy K Kountry Store|Walla Walla|WA|99362||||
Lehmanns Marktstand|Frankfurt a.M.||60528||||
Let''s Stop N Shop|San Francisco|CA|94117||||
LILA-Supermercado|Barquisimeto|Lara|3508||||
LINO-Delicateses|I. de Margarita|Nueva Esparta|4980||||
Lonesome Pine Restaurant|Portland|OR|97219||||
Magazzini Alimentari Riuniti|Bergamo||24100||||
Maison Dewey|Bruxelles||B-1180||||
Mère Paillarde|Montréal|Québec|H1J 1C3||||
Morgenstern Gesundkost|Leipzig||04179||||
North/South|London||SW7 1RZ||||
Océano Atlántico Ltda.|Buenos Aires||1010||||
Old World Delicatessen|Anchorage|AK|99508||||
Ottilies Käseladen|Köln||50739||||
Paris spécialités|Paris||75012||||
Pericles Comidas clásicas|México D.F.||05033||||
Piccolo und mehr|Salzburg||5020||||
Princesa Isabel Vinhos|Lisboa||1756||||
Que Delícia|Rio de Janeiro|RJ|02389-673||||
Queen Cozinha|Sao Paulo|SP|05487-020||||
QUICK-Stop|Cunewalde||01307||||
Rancho grande|Buenos Aires||1010||||
Rattlesnake Canyon Grocery|Albuquerque|NM|87110||||
Reggiani Caseifici|Reggio Emilia||42100||||
Ricardo Adocicados|Rio de Janeiro|RJ|02389-890||||
Richter Supermarkt|Genève||1203||||
Romero y tomillo|Madrid||28001||||
Santé Gourmet|Stavern||4110||||
Save-a-lot Markets|Boise|ID|83720||||
Seven Seas Imports|London||OX15 4NB||||
Simons bistro|Kobenhavn||1734||||
Spécialités du monde|Paris||75016||||
Split Rail Beer & Ale|Lander|WY|82520||||
Suprêmes délices|Charleroi||B-6000||||
The Big Cheese|Portland|OR|97201||||
The Cracker Box|Butte|MT|59801||||
Toms Spezialitäten|Münster||44087||||
Tortuga Restaurante|México D.F.||05033||||
Tradição Hipermercados|Sao Paulo|SP|05634-030||||
Trail''s Head Gourmet Provisioners|Kirkland|WA|98034||||
Vaffeljernet|Århus||8200||||
Victuailles en stock|Lyon||69004||||
Vins et alcools Chevalier|Reims||51100||||
Die Wandernde Kuh|Stuttgart||70563||||
Wartian Herkku|Oulu||90110||||
Wellington Importadora|Resende|SP|08737-363||||
White Clover Markets|Seattle|WA|98128||||
Wilman Kala|Helsinki||21240||||
Wolski  Zajazd|Warszawa||01-012||||
	
--(c)

SELECT DISTINCT
	e.firstname||' '||e.lastname as employee,
	e.city,
	e.region,
	e.postalcode,
	c.companyname as customer,
	c.city,
	c.region,
	c.postalcode	
FROM employees e	
	LEFT JOIN customers c
	on e.city = c.city
	AND e.region = c.region
	AND e.postalcode = c.postalcode;
employee|City|Region|PostalCode|customer|City|Region|PostalCode
Nancy Davolio|Seattle|WA|98122||||
Andrew Fuller|Tacoma|WA|98401||||
Janet Leverling|Kirkland|WA|98033||||
Margaret Peacock|Redmond|WA|98052||||
Steven Buchanan|London|NULL|SW1 8JR||||
Michael Suyama|London|NULL|EC2 7JR||||
Robert King|London|NULL|RG1 9SP||||
Laura Callahan|Seattle|WA|98105||||
Anne Dodsworth|London|NULL|WG2 7LT||||

 
